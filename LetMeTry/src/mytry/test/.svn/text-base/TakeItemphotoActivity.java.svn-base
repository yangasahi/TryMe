package mytry.test;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.os.Bundle;

import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;


public class TakeItemphotoActivity extends Activity implements
		SurfaceHolder.Callback {
	//从本地读取相片
	public static final String MIME_TYPE_IMAGE_JPEG = "image/jpeg"; 
    public static final int ACTIVITY_GET_IMAGE = 0; 
	
	private Button extractItemButton = null;
	private Button homeButton = null;
	private Button returnButton = null;
	private Button helpButton = null;
	private Button localChoiceButton = null;
	private Button takePhotoButton = null;
	private Button downloadButton = null;
	private SurfaceView surfaceview = null;// 存放照相机的容器
	private Camera camera = null;
	private SurfaceHolder surfaceHolder = null;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		Window window = getWindow();// 得到窗口
		requestWindowFeature(Window.FEATURE_NO_TITLE);// 没有标题
		window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
				WindowManager.LayoutParams.FLAG_FULLSCREEN);// 设置全屏
		window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);// 设置高亮

		setContentView(R.layout.takeitemphoto);
		surfaceview = (SurfaceView) findViewById(R.id.surface);
		extractItemButton = (Button) findViewById(R.id.extractItemButton);
		extractItemButton.setOnClickListener(new ExtractItemButtonListener());
		homeButton = (Button) findViewById(R.id.homeButton);
		homeButton.setOnClickListener(new HomeButtonListener());
		returnButton = (Button) findViewById(R.id.returnButton);
		returnButton.setOnClickListener(new ReturnButtonListener());
		helpButton = (Button) findViewById(R.id.helpButton);
		helpButton.setOnClickListener(new HelpButtonListener());
		localChoiceButton = (Button) findViewById(R.id.localChoiceButton);
		localChoiceButton.setOnClickListener(new LocalChoiceButtonListener());
		takePhotoButton = (Button) findViewById(R.id.takePhotoButton);
		takePhotoButton.setOnClickListener(new TakePhotoButtonListener());
		downloadButton = (Button) findViewById(R.id.downloadButton);
		downloadButton.setOnClickListener(new DownloadButtonListener());

		surfaceHolder = surfaceview.getHolder();
		surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
		surfaceHolder.addCallback(this);
		surfaceview.setFocusable(true);
		surfaceview.setFocusableInTouchMode(true);
		surfaceview.setClickable(true);
	}

	class ExtractItemButtonListener implements OnClickListener {

		@Override
		public void onClick(View v) {

			Intent intent = new Intent();
			intent.setClass(TakeItemphotoActivity.this,
					ExtractItemActivity.class);
			// 使用这个Intent对象来启动ResultActivity
			TakeItemphotoActivity.this.startActivity(intent);
		}
	}

	class HomeButtonListener implements OnClickListener {

		@Override
		public void onClick(View v) {

			camera.startPreview();
		}
	}

	class ReturnButtonListener implements OnClickListener {

		@Override
		public void onClick(View v) {

			Intent intent = new Intent(Intent.ACTION_MAIN);
			intent.addCategory(Intent.CATEGORY_HOME);
			intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			startActivity(intent);
			System.exit(0);

		}
	}

	class HelpButtonListener implements OnClickListener {

		@Override
		public void onClick(View v) {

			new AlertDialog.Builder(TakeItemphotoActivity.this)
					.setMessage("未实现").setPositiveButton("返回", null).show();

		}
	}

	class LocalChoiceButtonListener implements OnClickListener {

		@Override
		public void onClick(View v) {

			Intent getImage = new Intent(Intent.ACTION_GET_CONTENT); 
	        getImage.addCategory(Intent.CATEGORY_OPENABLE); 
	        getImage.setType(MIME_TYPE_IMAGE_JPEG); 
	        startActivityForResult(getImage, ACTIVITY_GET_IMAGE); 

		}
	}

	class TakePhotoButtonListener implements OnClickListener {

		@Override
		public void onClick(View v) {

			camera.takePicture(null, null, pictureCallback);

		}
	}

	class DownloadButtonListener implements OnClickListener {

		@Override
		public void onClick(View v) {

			new AlertDialog.Builder(TakeItemphotoActivity.this)
					.setMessage("未实现").setPositiveButton("返回", null).show();

		}
	}

	private PictureCallback pictureCallback = new PictureCallback() {

		@Override
		public void onPictureTaken(byte[] data, Camera camera) {
			// TODO Auto-generated method stub
			// 根据拍照所得的数据创建位图
			Bitmap bm = BitmapFactory.decodeByteArray(data, 0, data.length);

			// 创建一个位于SD卡上的文件
			File file = new File("/sdcard/TryMe/");
			file.mkdir();// 创建文件夹
			FileOutputStream outStream = null;
			try {
				// 打开指定文件对应的输出流
				outStream = new FileOutputStream("/sdcard/TryMe/picture.jpg");
				// 把位图输入到指定文件中
				bm.compress(CompressFormat.JPEG, 100, outStream);
				outStream.close();
			} catch (IOException e) {
				// TODO: handle exception
				e.printStackTrace();
			}

			camera = null;
		}
	};

	@Override
	public void surfaceChanged(SurfaceHolder holder, int format, int width,
			int height) {
		// TODO Auto-generated method stub

		camera.startPreview();
	}

	@Override
	public void surfaceCreated(SurfaceHolder holder) {
		// TODO Auto-generated method stub

		camera = Camera.open();
		try {
			camera.setPreviewDisplay(holder);
			Camera.Parameters parameters = camera.getParameters();
			if (this.getResources().getConfiguration().orientation != Configuration.ORIENTATION_LANDSCAPE) {
				parameters.set("orientation", "portrait");
				// Android 2.2和以上版本
				camera.setDisplayOrientation(90);

				// Android 2.0和以上版本
				parameters.setRotation(90);
			}
			// 用于Android 2.0和更高版本的效果
			List<String> colorEffects = parameters.getSupportedColorEffects();
			Iterator<String> cei = colorEffects.iterator();
			while (cei.hasNext()) {
				String currentEffect = cei.next();
				if (currentEffect.equals(Camera.Parameters.EFFECT_NONE)) {
					parameters.setColorEffect(Camera.Parameters.EFFECT_NONE);
					break;
				}
			}
			// 结束Android 2.0和更高版本的效果
			camera.setParameters(parameters);
		} catch (IOException exception) {
			camera.release();
		}
	}

	@Override
	public void surfaceDestroyed(SurfaceHolder holder) {
		// TODO Auto-generated method stub

		camera.stopPreview();
		camera.release();
	}
}